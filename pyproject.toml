[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "mock-decorator"
description = "Create a mock object for a Decorator"
version = "1.0.0"
license = { file = "LICENSE" }
keywords = ["test", "mock", "decorator"]
authors = [{ name = "WiredNerd", email = "pbuschmail-github@yahoo.com" }]
maintainers = [{ name = "WiredNerd", email = "pbuschmail-github@yahoo.com" }]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = []

[project.urls]
"Documentation" = "https://github.com/WiredNerd/mock-decorator"
"Homepage" = "https://github.com/WiredNerd/mock-decorator"
"Issue Tracker" = "https://github.com/WiredNerd/mock-decorator/issues"

[tool.setuptools]

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]
testpaths = ["tests"]
addopts = "-vv --cov-reset --cov-report=html:cov-html --cov-report=term"
sort_mode = "random"
sort_bucket = "session"

[tool.poodle]
reporters = ["summary", "html"]

[tool.poodle.runner_opts]
command_line = "pytest -x --assert=plain -o pythonpath='{PYTHONPATH}' --sort-mode=mutcov"

[tool.poodle.reporter_opts]

[tool.coverage.run]
branch = true

[tool.coverage.report]
skip_empty = true
exclude_also = ["import .*", "from .* import .*", "if TYPE_CHECKING:"]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311']
color = true

[tool.isort]
profile = 'black'
line_length = 120
py_version = 38

[tool.ruff]
target-version = "py38"
output-format = "full"
lint.select = ["ALL"]
lint.ignore = [
    "COM812",  # missing-trailing-comma
    "D203",    # 1 blank line required before class docstring
    "D213",    # multi-line-summary-second-line
    "EM101",   # Exception must not use a string literal, assign to variable first
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FIX002",  # Found a TODO
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link on the line following this TODO
    "TRY003",  # Avoid specifying long messages outside the exception class
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in method
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ISC001",  # single-line-implicit-string-concatenation
    "PLR2004", # Magic value used in comparison
    "PLR0911", # Too many return statements
]
line-length = 120
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".pants.d",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "venv",
]
lint.task-tags = ["nomut", "TODO", "FIXME", "XXX"]

[tool.ruff.lint.isort]
known-first-party = ["mock_decorator"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in `__init__`
    "S101",    # Use of `assert` detected
    "ANN001",  # Missing type annotation for function argument
    "ANN201",  # Missing return type annotation for public function
    "ANN202",  # Missing return type annotation for private function
    "ANN204",  # Missing return type annotation for special method `__init__`
    "ANN205",  # Missing return type annotation for staticmethod
    "ANN206",  # Missing return type annotation for classmethod
    "FBT003",  # Boolean positional value in function call
    "ERA001",  # Found commented-out code
    "PLR0913", # Too many arguments in function definition
    "PLR2004", # Magic value used in comparison
    "SLF001",  # Private member accessed
]
[tool.ruff.format]
